// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  image     String?
  accounts  Account[]
  sessions  Session[]

  lists     RankList[]
  follows   UserFollow[] @relation("follower")
  followers UserFollow[] @relation("following")

  currentlyPlayingTrackId String?
  currentlyPlayingTrack   Track? @relation("CurrentlyPlaying", fields: [currentlyPlayingTrackId], references: [id])
  lastPlaybackUpdate      DateTime?
  isListening             Boolean @default(false)

  trackStats  UserTrackStat[]
  artistStats UserArtistStat[]
  albumStats  UserAlbumStat[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Artist {
  id         String   @id @default(cuid())
  spotifyId  String   @unique
  name       String
  imageUrl   String?
  popularity Int?
  tracks     TrackArtist[]
  albums     Album[]
  genres     ArtistGenre[]
  userArtistStats UserArtistStat[] @relation("UserArtistStats")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  rankItems RankItem[] @relation("RankItemArtist")
}

model Album {
  id             String   @id @default(cuid())
  spotifyId      String   @unique
  name           String
  imageUrl       String?
  releaseDate    DateTime?
  primaryArtistId String?
  primaryArtist   Artist? @relation(fields: [primaryArtistId], references: [id])
  tracks         Track[]
  popularity     Int?
  userAlbumStats UserAlbumStat[] @relation("UserAlbumStats")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  rankItems RankItem[] @relation("RankItemAlbum")
  @@index([primaryArtistId])
}

model Track {
  id         String   @id @default(cuid())
  spotifyId  String   @unique
  isrc       String?  @unique
  name       String
  albumId    String?
  album      Album?   @relation(fields: [albumId], references: [id])
  durationMs Int
  explicit   Boolean  @default(false)
  popularity Int?
  artists    TrackArtist[]
  userTrackStats UserTrackStat[] @relation("UserTrackStats")
  currentListeners User[] @relation("CurrentlyPlaying")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  rankItems RankItem[] @relation("RankItemTrack")
  @@index([albumId])
}

model TrackArtist {
  trackId  String
  artistId String
  track    Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  @@id([trackId, artistId])
}

model Genre {
  id     String  @id @default(cuid())
  name   String  @unique
  artists ArtistGenre[]
}

model ArtistGenre {
  artistId String
  genreId  String
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  genre    Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  @@id([artistId, genreId])
}

enum RankKind {
  TRACK
  ALBUM
  ARTIST
}

model RankList {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  kind      RankKind
  title     String
  isPublic  Boolean  @default(true)
  items     RankItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId, kind])
  @@index([userId, createdAt])
}

model RankItem {
  id       String   @id @default(cuid())
  listId   String
  list     RankList @relation(fields: [listId], references: [id], onDelete: Cascade)
  position Int
  note     String?
  trackId  String?
  albumId  String?
  artistId String?
  track    Track?  @relation("RankItemTrack", fields: [trackId], references: [id])
  album    Album?  @relation("RankItemAlbum", fields: [albumId], references: [id])
  artist   Artist? @relation("RankItemArtist", fields: [artistId], references: [id])
  @@unique([listId, position])
  @@unique([listId, trackId])
  @@unique([listId, albumId])
  @@unique([listId, artistId])
  @@index([trackId])
  @@index([albumId])
  @@index([artistId])
}

model UserFollow {
  followerId String
  followingId String
  follower   User @relation("follower",  fields: [followerId], references: [id], onDelete: Cascade)
  following  User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  @@id([followerId, followingId])
}

model UserTrackStat {
  userId   String
  trackId  String
  rating   Int?
  liked    Boolean  @default(false)
  playCount Int     @default(0)
  lastPlayedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  track   Track @relation("UserTrackStats", fields: [trackId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([userId, trackId])
  @@index([trackId])
  @@index([userId])
}

model UserArtistStat {
  userId  String
  artistId String
  rating  Int?
  liked   Boolean @default(false)
  follow  Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  artist Artist @relation("UserArtistStats", fields: [artistId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([userId, artistId])
  @@index([artistId])
  @@index([userId])
}

model UserAlbumStat {
  userId  String
  albumId String
  rating  Int?
  liked   Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  album Album @relation("UserAlbumStats", fields: [albumId], references: [id], onDelete: Cascade)
  @@id([userId, albumId])
  @@index([albumId])
  @@index([userId])
}